import * as THREE from 'three';
import { VRMBlendShape } from './VRMBlendShapeMaster';
import { VRMFirstPerson } from './VRMFirstPerson';
import { VRMHumanBoneName, VRMHumanoid } from './VRMHumanoid';
import { VRMMaterial } from './VRMMaterial';
import { VRMMeta } from './VRMMeta';
import { VRMSecondaryAnimation } from './VRMSecondaryAnimation';
export declare const USERDATA_KEY_VRM = "VRM";
interface GLTF {
    scene: THREE.Scene;
    scenes: THREE.Scene[];
    cameras: THREE.Camera[];
    animations: THREE.AnimationClip[];
    asset: GLTFAsset;
    parser: any;
    userData: any;
}
export interface GLTFAsset {
    copyright?: string;
    generator?: string;
    version: string;
    minVersion?: string;
    extensions?: object;
    extras?: any;
}
export declare class VRM {
    asset: GLTFAsset;
    model: THREE.Object3D;
    parser: any;
    userData: any;
    exporterVersion: string;
    meta: VRMMeta;
    humanoid: VRMHumanoid;
    firstPerson: VRMFirstPerson;
    blendShapeMaster: VRMBlendShape;
    secondaryAnimation: VRMSecondaryAnimation;
    materialProperties: VRMMaterial[];
    private nodes;
    private textures;
    private meshes;
    fromGLTF(gltf: GLTF): Promise<this>;
    getNode(index: number): THREE.Object3D;
    getNodeByHumanBoneName(humanBoneName: VRMHumanBoneName): THREE.Object3D;
    getSubMeshesByIndex(index: number): THREE.Mesh[];
    getHumanBone(humanBoneName: VRMHumanBoneName): import("./VRMHumanoid").VRMHumanBone;
    setBlendShapeWeight(meshIndex: number, blendShapeIndex: number, value: number): void;
    setBlendShapeGroupWeight(index: number, value: number): void;
}
export {};
